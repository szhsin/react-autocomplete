"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[197],{9556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>N,contentTitle:()=>k,default:()=>M,frontMatter:()=>I,metadata:()=>o,toc:()=>T});const o=JSON.parse('{"id":"docs/extras/floating-ui","title":"Floating UI","description":"The API lets you easily integrate with a positioning library like Floating UI, so you can fine-tune the position of the autocomplete list.","source":"@site/docs/docs/extras/floating-ui.mdx","sourceDirName":"docs/extras","slug":"/docs/extras/floating-ui","permalink":"/react-autocomplete/docs/extras/floating-ui","draft":false,"unlisted":false,"editUrl":"https://github.com/szhsin/react-autocomplete/tree/master/website/docs/docs/extras/floating-ui.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"docsSidebar","previous":{"title":"Virtualization","permalink":"/react-autocomplete/docs/extras/virtualization"}}');var s=t(2540),i=t(8453),a=t(7039),l=t(3829),r=t(8069);const u="import { useState } from 'react';\nimport { useCombobox, autocomplete } from '@szhsin/react-autocomplete';\nimport { useFloating, autoUpdate, size } from '@floating-ui/react-dom';\nimport STATES from '../../data/states';\n\nconst Autocomplete = () => {\n  const [value, setValue] = useState<string>();\n  const [selected, setSelected] = useState<string>();\n  const items = value\n    ? STATES.filter((item) => item.toLowerCase().includes(value.toLowerCase()))\n    : STATES;\n\n  // highlight-start\n  const { refs, floatingStyles } = useFloating<HTMLInputElement>({\n    placement: 'bottom-start',\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      size({\n        padding: 16,\n        apply({ availableHeight, elements }) {\n          // This allows the autocomplete list to take up all the available height.\n          elements.floating.style.maxHeight = `${availableHeight}px`;\n        }\n      })\n    ]\n  });\n  // highlight-end\n\n  const {\n    getFocusCaptureProps,\n    getLabelProps,\n    getInputProps,\n    getClearProps,\n    getToggleProps,\n    getListProps,\n    getItemProps,\n    open,\n    focusIndex,\n    isInputEmpty\n  } = useCombobox({\n    // Provide the `inputRef` prop with the reference returned from the `useFloating` hook\n    // highlight-next-line\n    inputRef: refs.reference,\n    items,\n    value,\n    onChange: setValue,\n    selected,\n    onSelectChange: setSelected,\n    feature: autocomplete({ select: true })\n  });\n\n  return (\n    <div>\n      <label {...getLabelProps()} {...getFocusCaptureProps()}>\n        State\n      </label>\n\n      <div>\n        <input\n          placeholder=\"Select or type...\"\n          {...getInputProps()}\n          // Set the reference element to the input field,\n          // which should always come after {...getInputProps()}\n          // highlight-next-line\n          ref={refs.setReference}\n        />\n        {!isInputEmpty && <button {...getClearProps()}>X</button>}\n        <button {...getToggleProps()}>{open ? '\u2191' : '\u2193'}</button>\n      </div>\n\n      {open && (\n        <ul\n          // Set the floating element to the autocomplete list\n          // highlight-next-line\n          ref={refs.setFloating}\n          {...getListProps()}\n          style={{\n            listStyle: 'none',\n            color: '#000',\n            background: '#fff',\n            margin: 0,\n            padding: 0,\n            overflow: 'auto',\n            // Apply floating positioning styles to the autocomplete list\n            // highlight-next-line\n            ...floatingStyles\n          }}\n        >\n          {items.length ? (\n            items.map((item, index) => (\n              <li\n                style={{\n                  background: focusIndex === index ? '#ddd' : 'none',\n                  textDecoration: selected === item ? 'underline' : 'none'\n                }}\n                key={item}\n                {...getItemProps({ item, index })}\n              >\n                {item}\n              </li>\n            ))\n          ) : (\n            <li>No options</li>\n          )}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Autocomplete;\n",c="import { useState, useRef } from 'react';\nimport { useCombobox, dropdown } from '@szhsin/react-autocomplete';\nimport { useFloating, autoUpdate, size } from '@floating-ui/react-dom';\nimport STATES from '../../data/states';\n\nconst Dropdown = () => {\n  // highlight-next-line\n  const listRef = useRef<HTMLUListElement>(null);\n  const [value, setValue] = useState<string>();\n  const [selected, setSelected] = useState<string>();\n  const items = value\n    ? STATES.filter((item) => item.toLowerCase().includes(value.toLowerCase()))\n    : STATES;\n\n  // highlight-start\n  const { refs, floatingStyles } = useFloating<HTMLButtonElement>({\n    placement: 'bottom-start',\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      size({\n        padding: 16,\n        apply({ availableHeight }) {\n          // This allows the dropdown list to take up all the available height.\n          if (listRef.current && inputRef.current) {\n            listRef.current.style.maxHeight = `${availableHeight - inputRef.current.getBoundingClientRect().height}px`;\n          }\n        }\n      })\n    ]\n  });\n  // highlight-end\n\n  const {\n    getInputProps,\n    getClearProps,\n    getToggleProps,\n    getListProps,\n    getItemProps,\n    open,\n    focusIndex,\n    isInputEmpty,\n    inputRef\n  } = useCombobox({\n    items,\n    value,\n    onChange: setValue,\n    selected,\n    onSelectChange: setSelected,\n    feature: dropdown({\n      // Provide the `toggleRef` prop with the reference returned from the `useFloating` hook\n      // highlight-next-line\n      toggleRef: refs.reference\n    })\n  });\n\n  return (\n    <div>\n      <button\n        {...getToggleProps()}\n        // Set the reference element to the toggle button,\n        // which should always come after {...getToggleProps()}\n        // highlight-next-line\n        ref={refs.setReference}\n      >\n        {selected || 'Select a state'}\n      </button>\n\n      {open && (\n        <div\n          {...getListProps()}\n          // Set the floating element to the dropdown list\n          // highlight-next-line\n          ref={refs.setFloating}\n          style={{\n            color: '#000',\n            background: '#fff',\n            // Apply floating positioning styles to the dropdown list\n            // highlight-next-line\n            ...floatingStyles\n          }}\n        >\n          <div>\n            <input placeholder=\"Type to search...\" {...getInputProps()} />\n            {!isInputEmpty && <button {...getClearProps()}>X</button>}\n          </div>\n          <ul\n            // highlight-next-line\n            ref={listRef}\n            style={{\n              overflow: 'auto',\n              listStyle: 'none',\n              margin: 0,\n              padding: 0\n            }}\n          >\n            {items.length ? (\n              items.map((item, index) => (\n                <li\n                  style={{\n                    background: focusIndex === index ? '#ddd' : 'none',\n                    textDecoration: selected === item ? 'underline' : 'none'\n                  }}\n                  key={item}\n                  {...getItemProps({ item, index })}\n                >\n                  {item}\n                </li>\n              ))\n            ) : (\n              <li>No options</li>\n            )}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n";var p=t(8785),d=t(3696),g=t(4164),h=t(6507),m=t(1510),f=t(5883),x=t(4743),w=t(4967),b=t(558),y=t(6160),A=t(3747),v=t(2677),S=t(4800);const j=()=>{const[e,n]=(0,d.useState)(),[t,o]=(0,d.useState)(),i=e?v.A.filter((n=>n.toLowerCase().includes(e.toLowerCase()))):v.A,{refs:a,floatingStyles:l}=(0,x.we)({placement:"bottom-start",whileElementsMounted:w.ll,middleware:[(0,x.Ej)({padding:{top:60,bottom:16},apply(e){let{availableHeight:n,elements:t}=e;t.floating.style.maxHeight=`${n}px`}})]}),{getFocusCaptureProps:r,getLabelProps:u,getInputProps:c,getClearProps:p,getToggleProps:f,getListProps:j,getItemProps:P,open:C,focusIndex:I,isInputEmpty:k}=(0,h.B)({inputRef:a.reference,items:i,value:e,onChange:n,selected:t,onSelectChange:o,feature:(0,m.n)({select:!0})});return(0,s.jsxs)("div",{className:S.A.wrap,style:{marginTop:32},children:[(0,s.jsx)("label",{className:S.A.label,...u(),...r(),children:"State"}),(0,s.jsxs)("div",{className:S.A.inputWrap,children:[(0,s.jsx)("input",{className:S.A.input,placeholder:"Select or type...",...c(),ref:a.setReference}),!k&&(0,s.jsx)("button",{className:S.A.clear,...p(),children:(0,s.jsx)(b.A,{})}),(0,s.jsx)("button",{className:S.A.toggle,...f(),children:C?(0,s.jsx)(A.A,{}):(0,s.jsx)(y.A,{})})]}),C&&(0,s.jsx)("ul",{className:S.A.list,ref:a.setFloating,...j(),style:{overflow:"auto",...l},children:i.length?i.map(((e,n)=>(0,s.jsx)("li",{className:(0,g.$)(S.A.item,I===n&&S.A.focused,t===e&&S.A.selected),...P({item:e,index:n}),children:e},e))):(0,s.jsx)("li",{className:S.A.noResult,children:"No options"})})]})},P=()=>{const e=(0,d.useRef)(null),[n,t]=(0,d.useState)(),[o,i]=(0,d.useState)(),a=n?v.A.filter((e=>e.toLowerCase().includes(n.toLowerCase()))):v.A,{refs:l,floatingStyles:r}=(0,x.we)({placement:"bottom-start",whileElementsMounted:w.ll,middleware:[(0,x.Ej)({padding:{top:60,bottom:16},apply(n){let{availableHeight:t}=n;e.current&&C.current&&(e.current.style.maxHeight=t-C.current.getBoundingClientRect().height+"px")}})]}),{getInputProps:u,getClearProps:c,getToggleProps:p,getListProps:m,getItemProps:y,open:A,focusIndex:j,isInputEmpty:P,inputRef:C}=(0,h.B)({items:a,value:n,onChange:t,selected:o,onSelectChange:i,feature:(0,f.W)({toggleRef:l.reference})});return(0,s.jsxs)("div",{className:S.A.wrap,children:[(0,s.jsx)("button",{className:S.A.button,...p(),ref:l.setReference,children:o||"Select a state"}),A&&(0,s.jsxs)("div",{className:S.A.dropdown,...m(),ref:l.setFloating,style:r,children:[(0,s.jsxs)("div",{className:S.A.inputWrap,children:[(0,s.jsx)("input",{className:S.A.inputBorderless,placeholder:"Type to search...",...u()}),!P&&(0,s.jsx)("button",{className:S.A.dropdownClear,...c(),children:(0,s.jsx)(b.A,{})})]}),(0,s.jsx)("ul",{ref:e,className:(0,g.$)(S.A.dropdownList,S.A.scroll),children:a.length?a.map(((e,n)=>(0,s.jsx)("li",{className:(0,g.$)(S.A.item,j===n&&S.A.focused,o===e&&S.A.selected),...y({item:e,index:n}),children:e},e))):(0,s.jsx)("li",{className:S.A.noResult,children:"No options"})})]})]})},C=()=>(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(j,{}),(0,s.jsx)(P,{})]}),I={sidebar_position:8},k="Floating UI",N={},T=[];function R(e){const n={a:"a",admonition:"admonition",h1:"h1",header:"header",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"floating-ui",children:"Floating UI"})}),"\n",(0,s.jsxs)(n.p,{children:["The API lets you easily integrate with a positioning library like ",(0,s.jsx)(n.a,{href:"https://floating-ui.com/docs/useFloating",children:"Floating UI"}),", so you can fine-tune the position of the autocomplete list."]}),"\n",(0,s.jsxs)(n.p,{children:["Below are two examples of integration: one for ",(0,s.jsx)(n.strong,{children:"autocomplete"})," and one for a ",(0,s.jsx)(n.strong,{children:"dropdown"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"These examples are set up to make the list take up as much available height as possible within the viewport. Try opening the list and scrolling the page up and down to observe how the list always perfectly fits within the page."})}),"\n",(0,s.jsx)(C,{}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(l.A,{value:"ts1",label:"Autocomplete.tsx",children:(0,s.jsx)(r.A,{language:"tsx",children:u})}),(0,s.jsx)(l.A,{value:"ts2",label:"Dropdown.tsx",children:(0,s.jsx)(r.A,{language:"tsx",children:c})}),(0,s.jsx)(l.A,{value:"data",label:"data/states.ts",children:(0,s.jsx)(r.A,{language:"ts",children:p.A})})]})]})}function M(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(R,{...e})}):R(e)}},2677:(e,n,t)=>{t.d(n,{A:()=>o});const o=["Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming"]},8785:(e,n,t)=>{t.d(n,{A:()=>o});const o="// https://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States#States\n\nexport default [\n  'Alabama',\n  'Alaska',\n  'Arizona',\n  'Arkansas',\n  'California',\n  'Colorado',\n  'Connecticut',\n  'Delaware',\n  'Florida',\n  'Georgia',\n  'Hawaii',\n  'Idaho',\n  'Illinois',\n  'Indiana',\n  'Iowa',\n  'Kansas',\n  'Kentucky',\n  'Louisiana',\n  'Maine',\n  'Maryland',\n  'Massachusetts',\n  'Michigan',\n  'Minnesota',\n  'Mississippi',\n  'Missouri',\n  'Montana',\n  'Nebraska',\n  'Nevada',\n  'New Hampshire',\n  'New Jersey',\n  'New Mexico',\n  'New York',\n  'North Carolina',\n  'North Dakota',\n  'Ohio',\n  'Oklahoma',\n  'Oregon',\n  'Pennsylvania',\n  'Rhode Island',\n  'South Carolina',\n  'South Dakota',\n  'Tennessee',\n  'Texas',\n  'Utah',\n  'Vermont',\n  'Virginia',\n  'Washington',\n  'West Virginia',\n  'Wisconsin',\n  'Wyoming'\n];\n"},5883:(e,n,t)=>{t.d(n,{W:()=>r});var o=t(3862),s=t(5464),i=t(3696),a=t(7990);const l=({closeOnSelect:e=!0,toggleRef:n}={})=>({inputRef:t,open:o,setOpen:s,focusIndex:l,value:r,tmpValue:u})=>{const[c,p]=(0,a.e)(o,s),d=(0,i.useRef)(null),g=n||d,h=u||r||"";(0,i.useEffect)((()=>{o&&t.current?.focus({preventScroll:!0})}),[o,t]);return{toggleRef:g,isInputEmpty:!h,getToggleProps:()=>({type:"button","aria-haspopup":!0,"aria-expanded":o,ref:g,onMouseDown:c,onClick:p,onKeyDown:e=>{const{key:n}=e;"ArrowDown"===n&&(e.preventDefault(),s(!0))}}),getInputProps:()=>({value:h,onKeyDown:n=>{const{key:t}=n;("Escape"===t||e&&l>=0&&"Enter"===t)&&setTimeout((()=>g.current?.focus()),0)}})}},r=e=>(0,o.o)((0,s.d)({...e,select:!0,deselectOnClear:!1}),l(e))}}]);