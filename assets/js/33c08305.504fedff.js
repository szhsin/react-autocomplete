"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[846],{7318:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>C,contentTitle:()=>S,default:()=>w,frontMatter:()=>f,metadata:()=>t,toc:()=>M});const t=JSON.parse('{"id":"docs/extras/object-items","title":"Object items","description":"List items can be not only strings but also objects.","source":"@site/docs/docs/extras/object-items.mdx","sourceDirName":"docs/extras","slug":"/docs/extras/object-items","permalink":"/react-autocomplete/docs/extras/object-items","draft":false,"unlisted":false,"editUrl":"https://github.com/szhsin/react-autocomplete/tree/master/website/docs/docs/extras/object-items.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Grouped items","permalink":"/react-autocomplete/docs/extras/grouped"},"next":{"title":"Disabled items","permalink":"/react-autocomplete/docs/extras/disabled-items"}}');var s=a(2540),r=a(8453),b=a(267),i=a(8860),o=a(3457);const m="import { useState } from 'react';\nimport { useCombobox, autocomplete } from '@szhsin/react-autocomplete';\nimport STATES from '../../data/states-obj';\n\nconst ObjectItems = () => {\n  const [value, setValue] = useState<string>();\n  // highlight-next-line\n  const [selected, setSelected] = useState<{ name: string; abbr: string }>();\n  const items = value\n    ? STATES.filter((item) => item.name.toLowerCase().startsWith(value.toLowerCase()))\n    : STATES;\n\n  const {\n    getFocusCaptureProps,\n    getLabelProps,\n    getInputProps,\n    getClearProps,\n    getToggleProps,\n    getListProps,\n    getItemProps,\n    // highlight-next-line\n    isItemSelected,\n    open,\n    focusIndex,\n    isInputEmpty\n  } = useCombobox({\n    items,\n    // When items are objects, you must specify how to retrieve the text value from the item.\n    // highlight-next-line\n    getItemValue: (item) => item.name,\n\n    // If item references change on each render, you should define how items are equal.\n    // By default, it compares object references if `isEqual` is not provided.\n    // highlight-next-line\n    isEqual: (item1, item2) => item1?.abbr === item2?.abbr,\n\n    value,\n    onChange: setValue,\n    selected,\n    onSelectChange: setSelected,\n    feature: autocomplete({ select: true })\n  });\n\n  return (\n    <div>\n      <label {...getLabelProps()} {...getFocusCaptureProps()}>\n        State\n      </label>\n\n      <div>\n        <input placeholder=\"Select or type...\" {...getInputProps()} />\n        {!isInputEmpty && <button {...getClearProps()}>X</button>}\n        <button {...getToggleProps()}>{open ? '\u2191' : '\u2193'}</button>\n      </div>\n\n      <ul\n        {...getListProps()}\n        style={{\n          display: open ? 'block' : 'none',\n          position: 'absolute',\n          listStyle: 'none',\n          color: '#000',\n          background: '#fff',\n          overflow: 'auto',\n          maxHeight: 300,\n          margin: 0,\n          padding: 0\n        }}\n      >\n        {items.length ? (\n          items.map((item, index) => (\n            <li\n              style={{\n                background: focusIndex === index ? '#ddd' : 'none',\n                // Use `isItemSelected` to check if an item has been selected\n                // highlight-next-line\n                textDecoration: isItemSelected(item) ? 'underline' : 'none'\n              }}\n              key={item.abbr}\n              {...getItemProps({ item, index })}\n            >\n              {item.name}\n            </li>\n          ))\n        ) : (\n          <li>No options</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default ObjectItems;\n",l="// https://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States#States\n\nexport default [\n  {\n    name: 'Alabama',\n    abbr: 'AL'\n  },\n  {\n    name: 'Alaska',\n    abbr: 'AK'\n  },\n  {\n    name: 'Arizona',\n    abbr: 'AZ'\n  },\n  {\n    name: 'Arkansas',\n    abbr: 'AR'\n  },\n  {\n    name: 'California',\n    abbr: 'CA'\n  },\n  {\n    name: 'Colorado',\n    abbr: 'CO'\n  },\n  {\n    name: 'Connecticut',\n    abbr: 'CT'\n  },\n  {\n    name: 'Delaware',\n    abbr: 'DE'\n  },\n  {\n    name: 'Florida',\n    abbr: 'FL'\n  },\n  {\n    name: 'Georgia',\n    abbr: 'GA'\n  },\n  {\n    name: 'Hawaii',\n    abbr: 'HI'\n  },\n  {\n    name: 'Idaho',\n    abbr: 'ID'\n  },\n  {\n    name: 'Illinois',\n    abbr: 'IL'\n  },\n  {\n    name: 'Indiana',\n    abbr: 'IN'\n  },\n  {\n    name: 'Iowa',\n    abbr: 'IA'\n  },\n  {\n    name: 'Kansas',\n    abbr: 'KS'\n  },\n  {\n    name: 'Kentucky',\n    abbr: 'KY'\n  },\n  {\n    name: 'Louisiana',\n    abbr: 'LA'\n  },\n  {\n    name: 'Maine',\n    abbr: 'ME'\n  },\n  {\n    name: 'Maryland',\n    abbr: 'MD'\n  },\n  {\n    name: 'Massachusetts',\n    abbr: 'MA'\n  },\n  {\n    name: 'Michigan',\n    abbr: 'MI'\n  },\n  {\n    name: 'Minnesota',\n    abbr: 'MN'\n  },\n  {\n    name: 'Mississippi',\n    abbr: 'MS'\n  },\n  {\n    name: 'Missouri',\n    abbr: 'MO'\n  },\n  {\n    name: 'Montana',\n    abbr: 'MT'\n  },\n  {\n    name: 'Nebraska',\n    abbr: 'NE'\n  },\n  {\n    name: 'Nevada',\n    abbr: 'NV'\n  },\n  {\n    name: 'New Hampshire',\n    abbr: 'NH'\n  },\n  {\n    name: 'New Jersey',\n    abbr: 'NJ'\n  },\n  {\n    name: 'New Mexico',\n    abbr: 'NM'\n  },\n  {\n    name: 'New York',\n    abbr: 'NY'\n  },\n  {\n    name: 'North Carolina',\n    abbr: 'NC'\n  },\n  {\n    name: 'North Dakota',\n    abbr: 'ND'\n  },\n  {\n    name: 'Ohio',\n    abbr: 'OH'\n  },\n  {\n    name: 'Oklahoma',\n    abbr: 'OK'\n  },\n  {\n    name: 'Oregon',\n    abbr: 'OR'\n  },\n  {\n    name: 'Pennsylvania',\n    abbr: 'PA'\n  },\n  {\n    name: 'Rhode Island',\n    abbr: 'RI'\n  },\n  {\n    name: 'South Carolina',\n    abbr: 'SC'\n  },\n  {\n    name: 'South Dakota',\n    abbr: 'SD'\n  },\n  {\n    name: 'Tennessee',\n    abbr: 'TN'\n  },\n  {\n    name: 'Texas',\n    abbr: 'TX'\n  },\n  {\n    name: 'Utah',\n    abbr: 'UT'\n  },\n  {\n    name: 'Vermont',\n    abbr: 'VT'\n  },\n  {\n    name: 'Virginia',\n    abbr: 'VA'\n  },\n  {\n    name: 'Washington',\n    abbr: 'WA'\n  },\n  {\n    name: 'West Virginia',\n    abbr: 'WV'\n  },\n  {\n    name: 'Wisconsin',\n    abbr: 'WI'\n  },\n  {\n    name: 'Wyoming',\n    abbr: 'WY'\n  }\n];\n";var c=a(3696),d=a(4164),u=a(6507),p=a(1510),h=a(2534),g=a(1608),x=a(4603);const A=[{name:"Alabama",abbr:"AL"},{name:"Alaska",abbr:"AK"},{name:"Arizona",abbr:"AZ"},{name:"Arkansas",abbr:"AR"},{name:"California",abbr:"CA"},{name:"Colorado",abbr:"CO"},{name:"Connecticut",abbr:"CT"},{name:"Delaware",abbr:"DE"},{name:"Florida",abbr:"FL"},{name:"Georgia",abbr:"GA"},{name:"Hawaii",abbr:"HI"},{name:"Idaho",abbr:"ID"},{name:"Illinois",abbr:"IL"},{name:"Indiana",abbr:"IN"},{name:"Iowa",abbr:"IA"},{name:"Kansas",abbr:"KS"},{name:"Kentucky",abbr:"KY"},{name:"Louisiana",abbr:"LA"},{name:"Maine",abbr:"ME"},{name:"Maryland",abbr:"MD"},{name:"Massachusetts",abbr:"MA"},{name:"Michigan",abbr:"MI"},{name:"Minnesota",abbr:"MN"},{name:"Mississippi",abbr:"MS"},{name:"Missouri",abbr:"MO"},{name:"Montana",abbr:"MT"},{name:"Nebraska",abbr:"NE"},{name:"Nevada",abbr:"NV"},{name:"New Hampshire",abbr:"NH"},{name:"New Jersey",abbr:"NJ"},{name:"New Mexico",abbr:"NM"},{name:"New York",abbr:"NY"},{name:"North Carolina",abbr:"NC"},{name:"North Dakota",abbr:"ND"},{name:"Ohio",abbr:"OH"},{name:"Oklahoma",abbr:"OK"},{name:"Oregon",abbr:"OR"},{name:"Pennsylvania",abbr:"PA"},{name:"Rhode Island",abbr:"RI"},{name:"South Carolina",abbr:"SC"},{name:"South Dakota",abbr:"SD"},{name:"Tennessee",abbr:"TN"},{name:"Texas",abbr:"TX"},{name:"Utah",abbr:"UT"},{name:"Vermont",abbr:"VT"},{name:"Virginia",abbr:"VA"},{name:"Washington",abbr:"WA"},{name:"West Virginia",abbr:"WV"},{name:"Wisconsin",abbr:"WI"},{name:"Wyoming",abbr:"WY"}];var N=a(7869),I=a(9094);const j=()=>{const[n,e]=(0,c.useState)(),[a,t]=(0,c.useState)(),r=n?A.filter((e=>e.name.toLowerCase().startsWith(n.toLowerCase()))):A,{getFocusCaptureProps:b,getLabelProps:i,getInputProps:o,getClearProps:m,getToggleProps:l,getListProps:j,getItemProps:f,isItemSelected:S,open:C,focusIndex:M,isInputEmpty:k}=(0,u.B)({items:r,getItemValue:n=>n.name,isEqual:(n,e)=>n?.abbr===e?.abbr,value:n,onChange:e,selected:a,onSelectChange:t,feature:(0,p.n)({select:!0})}),w=(0,I.i)(C,r);return(0,s.jsxs)("div",{className:N.A.wrap,children:[(0,s.jsx)("label",{className:N.A.label,...i(),...b(),children:"State"}),(0,s.jsxs)("div",{className:N.A.inputWrap,children:[(0,s.jsx)("input",{className:N.A.input,placeholder:"Select or type...",...o()}),!k&&(0,s.jsx)("button",{className:N.A.clear,...m(),children:(0,s.jsx)(h.A,{})}),(0,s.jsx)("button",{className:N.A.toggle,...l(),children:C?(0,s.jsx)(x.A,{}):(0,s.jsx)(g.A,{})})]}),(0,s.jsx)("ul",{ref:w,className:(0,d.$)(N.A.list,N.A.scroll),...j(),style:{display:C?"block":"none"},children:r.length?r.map(((n,e)=>(0,s.jsx)("li",{className:(0,d.$)(N.A.item,M===e&&N.A.focused,S(n)&&N.A.selected),...f({item:n,index:e}),children:n.name},n.abbr))):(0,s.jsx)("li",{className:N.A.noResult,children:"No options"})})]})},f={sidebar_position:2},S="Object items",C={},M=[];function k(n){const e={h1:"h1",header:"header",p:"p",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"object-items",children:"Object items"})}),"\n",(0,s.jsx)(e.p,{children:"List items can be not only strings but also objects."}),"\n",(0,s.jsx)(j,{}),"\n",(0,s.jsxs)(b.A,{children:[(0,s.jsx)(i.A,{value:"ts",label:"ObjectItems.tsx",children:(0,s.jsx)(o.A,{language:"tsx",children:m})}),(0,s.jsx)(i.A,{value:"data",label:"data/states-obj.ts",children:(0,s.jsx)(o.A,{language:"ts",children:l})})]})]})}function w(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(k,{...n})}):k(n)}}}]);