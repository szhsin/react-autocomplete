"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[882],{1162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>k,default:()=>j,frontMatter:()=>P,metadata:()=>s,toc:()=>y});const s=JSON.parse('{"id":"docs/extras/grouped","title":"Grouped items","description":"","source":"@site/docs/docs/extras/grouped.mdx","sourceDirName":"docs/extras","slug":"/docs/extras/grouped","permalink":"/react-autocomplete/docs/extras/grouped","draft":false,"unlisted":false,"editUrl":"https://github.com/szhsin/react-autocomplete/tree/master/website/docs/docs/extras/grouped.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Multi-select Dropdown","permalink":"/react-autocomplete/docs/features/multiSelectDropdown"},"next":{"title":"Object items","permalink":"/react-autocomplete/docs/extras/object-items"}}');var a=n(4848),i=n(8453),o=n(267),r=n(8860),l=n(1432);const u="import React, { useState } from 'react';\nimport { useCombobox, autocomplete, mergeGroupedItems } from '@szhsin/react-autocomplete';\nimport GROUPED from '../../data/states-grouped';\n\nconst Grouped = () => {\n  const [value, setValue] = useState<string>();\n  const [selected, setSelected] = useState<string>();\n\n  // It's up to you how to filter items based on the input value\n  const groups = value\n    ? GROUPED.map(({ initial, states }) => ({\n        initial,\n        states: states.filter((item) => item.toLowerCase().includes(value.toLowerCase()))\n      })).filter((group) => group.states.length > 0)\n    : GROUPED;\n\n  const {\n    getFocusCaptureProps,\n    getLabelProps,\n    getInputProps,\n    getClearProps,\n    getToggleProps,\n    getListProps,\n    getItemProps,\n    open,\n    focusIndex,\n    isInputEmpty\n  } = useCombobox({\n    // The main hook always expects a one-dimensional array,\n    // and we provide a `mergeGroupedItems` utility to merge the groups.\n    // highlight-next-line\n    items: mergeGroupedItems({ groups, getItemsInGroup: (group) => group.states }),\n    value,\n    onChange: setValue,\n    selected,\n    onSelectChange: setSelected,\n    feature: autocomplete({ select: true })\n  });\n\n  // highlight-next-line\n  let itemIndex = -1;\n\n  return (\n    <div>\n      <label {...getLabelProps()} {...getFocusCaptureProps()}>\n        State\n      </label>\n\n      <div>\n        <input placeholder=\"Select or type...\" {...getInputProps()} />\n        {!isInputEmpty && <button {...getClearProps()}>X</button>}\n        <button {...getToggleProps()}>{open ? '\u2191' : '\u2193'}</button>\n      </div>\n\n      <ul\n        {...getListProps()}\n        style={{\n          display: open ? 'block' : 'none',\n          position: 'absolute',\n          listStyle: 'none',\n          color: '#000',\n          background: '#fff',\n          overflow: 'auto',\n          maxHeight: 300,\n          padding: 0\n        }}\n      >\n        {groups.length ? (\n          groups.map(({ initial, states }) => (\n            <React.Fragment key={initial}>\n              <li>{initial}</li>\n              {states.map((item) => {\n                // `itemIndex` should be the index within the flattened array of items.\n                // highlight-next-line\n                itemIndex++;\n                return (\n                  <li\n                    key={item}\n                    {...getItemProps({ item, index: itemIndex })}\n                    style={{\n                      background: focusIndex === itemIndex ? '#ddd' : 'none',\n                      textDecoration: selected === item ? 'underline' : 'none'\n                    }}\n                  >\n                    {item}\n                  </li>\n                );\n              })}\n            </React.Fragment>\n          ))\n        ) : (\n          <li>No options</li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Grouped;\n",c="export default [\n  {\n    initial: 'A',\n    states: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']\n  },\n  {\n    initial: 'C',\n    states: ['California', 'Colorado', 'Connecticut']\n  },\n  {\n    initial: 'D',\n    states: ['Delaware']\n  },\n  {\n    initial: 'F',\n    states: ['Florida']\n  },\n  {\n    initial: 'G',\n    states: ['Georgia']\n  },\n  {\n    initial: 'H',\n    states: ['Hawaii']\n  },\n  {\n    initial: 'I',\n    states: ['Idaho', 'Illinois', 'Indiana', 'Iowa']\n  },\n  {\n    initial: 'K',\n    states: ['Kansas', 'Kentucky']\n  },\n  {\n    initial: 'L',\n    states: ['Louisiana']\n  },\n  {\n    initial: 'M',\n    states: [\n      'Maine',\n      'Maryland',\n      'Massachusetts',\n      'Michigan',\n      'Minnesota',\n      'Mississippi',\n      'Missouri',\n      'Montana'\n    ]\n  },\n  {\n    initial: 'N',\n    states: [\n      'Nebraska',\n      'Nevada',\n      'New Hampshire',\n      'New Jersey',\n      'New Mexico',\n      'New York',\n      'North Carolina',\n      'North Dakota'\n    ]\n  },\n  {\n    initial: 'O',\n    states: ['Ohio', 'Oklahoma', 'Oregon']\n  },\n  {\n    initial: 'P',\n    states: ['Pennsylvania']\n  },\n  {\n    initial: 'R',\n    states: ['Rhode Island']\n  },\n  {\n    initial: 'S',\n    states: ['South Carolina', 'South Dakota']\n  },\n  {\n    initial: 'T',\n    states: ['Tennessee', 'Texas']\n  },\n  {\n    initial: 'U',\n    states: ['Utah']\n  },\n  {\n    initial: 'V',\n    states: ['Vermont', 'Virginia']\n  },\n  {\n    initial: 'W',\n    states: ['Washington', 'West Virginia', 'Wisconsin', 'Wyoming']\n  }\n];\n";var d=n(6540),p=n(4164),g=n(6238);const m=Array.isArray,h=e=>{let{groups:t,getItemsInGroup:n}=e;return(m(t)?t:Object.values(t)).reduce(((e,t)=>e.concat(m(t)?t:n?n(t):[])),[])};var x=n(8185),b=n(1236),I=n(7210),f=n(6217);const w=[{initial:"A",states:["Alabama","Alaska","Arizona","Arkansas"]},{initial:"C",states:["California","Colorado","Connecticut"]},{initial:"D",states:["Delaware"]},{initial:"F",states:["Florida"]},{initial:"G",states:["Georgia"]},{initial:"H",states:["Hawaii"]},{initial:"I",states:["Idaho","Illinois","Indiana","Iowa"]},{initial:"K",states:["Kansas","Kentucky"]},{initial:"L",states:["Louisiana"]},{initial:"M",states:["Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana"]},{initial:"N",states:["Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota"]},{initial:"O",states:["Ohio","Oklahoma","Oregon"]},{initial:"P",states:["Pennsylvania"]},{initial:"R",states:["Rhode Island"]},{initial:"S",states:["South Carolina","South Dakota"]},{initial:"T",states:["Tennessee","Texas"]},{initial:"U",states:["Utah"]},{initial:"V",states:["Vermont","Virginia"]},{initial:"W",states:["Washington","West Virginia","Wisconsin","Wyoming"]}];var A=n(7869);const N=()=>{const[e,t]=(0,d.useState)(),[n,s]=(0,d.useState)(),i=e?w.map((t=>{let{initial:n,states:s}=t;return{initial:n,states:s.filter((t=>t.toLowerCase().includes(e.toLowerCase())))}})).filter((e=>e.states.length>0)):w,{getFocusCaptureProps:o,getLabelProps:r,getInputProps:l,getClearProps:u,getToggleProps:c,getListProps:m,getItemProps:N,open:P,focusIndex:k,isInputEmpty:C}=(0,g.B)({items:h({groups:i,getItemsInGroup:e=>e.states}),value:e,onChange:t,selected:n,onSelectChange:s,feature:(0,x.n)({select:!0})});let y=-1;return(0,a.jsxs)("div",{className:A.A.wrap,children:[(0,a.jsx)("label",{className:A.A.label,...r(),...o(),children:"State"}),(0,a.jsxs)("div",{className:A.A.inputWrap,children:[(0,a.jsx)("input",{className:A.A.input,placeholder:"Select or type...",...l()}),!C&&(0,a.jsx)("button",{className:A.A.clear,...u(),children:(0,a.jsx)(b.A,{})}),(0,a.jsx)("button",{className:A.A.toggle,...c(),children:P?(0,a.jsx)(f.A,{}):(0,a.jsx)(I.A,{})})]}),(0,a.jsx)("ul",{className:(0,p.$)(A.A.list,A.A.scroll),...m(),style:{display:P?"block":"none"},children:i.length?i.map((e=>{let{initial:t,states:s}=e;return(0,a.jsxs)(d.Fragment,{children:[(0,a.jsx)("li",{className:A.A.groupHead,children:t}),s.map((e=>(y++,(0,a.jsx)("li",{className:(0,p.$)(A.A.item,k===y&&A.A.focused,n===e&&A.A.selected),...N({item:e,index:y}),children:e},e))))]},t)})):(0,a.jsx)("li",{className:A.A.noResult,children:"No options"})})]})},P={sidebar_position:1},k="Grouped items",C={},y=[];function v(e){const t={h1:"h1",header:"header",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"grouped-items",children:"Grouped items"})}),"\n",(0,a.jsx)(N,{}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsx)(r.A,{value:"ts",label:"Grouped.tsx",children:(0,a.jsx)(l.A,{language:"tsx",children:u})}),(0,a.jsx)(r.A,{value:"data",label:"data/states-grouped.ts",children:(0,a.jsx)(l.A,{language:"ts",children:c})})]})]})}function j(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}},8185:(e,t,n)=>{n.d(t,{n:()=>u});var s=n(5430),a=n(1975),i=n(4444),o=n(9301),r=n(9635);var l=n(8321);const u=e=>(0,s.o)((0,a.d)(e),(e=>{let{id:t,inputRef:n,open:s,setOpen:a}=e;const[l,u]=(0,o.e)(s,a),[c,d,p]=(0,r._)(n);return{getToggleProps:()=>({...(0,i.l0)(t,s),onMouseDown:()=>{l(),c()},onClick:()=>{u(),p()}}),getInputProps:()=>({onBlur:d})}}),(0,l.P)())}}]);